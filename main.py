from oauth2client.service_account import ServiceAccountCredentials
import gspread

# Google
gscope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
gcredentials = 'parameters.json'
gdocument = 'bd_bot'

import telebot
from telebot import types
import time
from datetime import datetime
from config import TOKEN, admin
import sqlite3
import keyboard as kb
import config as config
import functions as func
from config import db, TOKEN
import codecs
import re
from collections import Counter
import numpy as np
import logging
from threading import Thread
from apscheduler.schedulers.background import BackgroundScheduler
from tzlocal import get_localzone


bot = telebot.TeleBot(TOKEN)
bot_username = bot.get_me().username

markdown = """
    *bold text*
    _italic text_
    [text](URL)
    """

logging.basicConfig(level=logging.INFO, filename="log.log",
                    format="%(asctime)s %(levelname)s %(message)s", filemode="w", encoding = "UTF-8")

print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')



# –ó–∞–ø–∏—Å—å –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö
@bot.message_handler(commands=['start'])
def get_text_message(message):
    user_first_name = message.from_user.first_name
    chat_id = message.chat.id
    username = message.from_user.username
    print('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è ', user_first_name, username, message.from_user.id)
    func.first_join(user_id=chat_id, username=username)
    bot.send_message(message.from_user.id, 'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–≠—Ç–æ –±–æ—Ç –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–æ–π –ë–∏–±–ª–µ–π—Å–∫–æ–π –¶–µ—Ä–∫–≤–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è –ë–∏–±–ª–∏–∏ –ø–æ –ø–ª–∞–Ω—É.\n\n‚ùóÔ∏è–í–Ω–∞—á–∞–ª–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ [—Å—Å—ã–ª–∫–µ](https://telegra.ph/Plan-chteniya-Biblii-NBC-bot-01-10)', parse_mode= "Markdown", reply_markup=kb.menu)
    logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î: {username}, {user_first_name}.")



# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —Ñ—É–Ω–∫—Ü–∏–µ–π —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∏—Å—Ç–∫–æ–π id –≤ –±–¥
def whats_read_evday():
    print('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã')
    tconv = time.strftime("%d.%m.%Y")
    today_date = tconv
    inline_today = func.addiction_stat(day = today_date)
    info_msg = func.msg_plan(day_input=today_date)
    users = func.admin_message()
    for i in range(len(users)):
        rem_select = func.reminder_select(user_id = users[i][0])
        try:
            # print("MAIN –ø–æ–ª—É—á–µ–Ω—ã id —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", rem_select)
            for m in range(len(rem_select)):
                try:
                    time.sleep(1)
                    func.reminder_delete(user_id = users[i][0], message_id = rem_select[m][0])
                    bot.edit_message_reply_markup(users[i][0], message_id = rem_select[m][0], reply_markup = '')
                except:
                    pass
        except:
                pass
        try:
            time.sleep(1)
            msg = bot.send_message(users[i][0], f'‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\nüìÜ –°–µ–≥–æ–¥–Ω—è {today_date}, *–¥–µ–Ω—å ‚Ññ{inline_today}*\n\nüìñ –ß–∏—Ç–∞–µ–º *{info_msg}*', parse_mode= "Markdown", reply_markup=kb.inline_read)
            message_id = msg.message_id
            # print('MAIN ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ', message_id)
            func.reminder_add(user_id = users[i][0], message_id = message_id)
        except:
            pass
    print('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
tz = get_localzone()
scheduler = BackgroundScheduler(timezone=tz)
scheduler.add_job(whats_read_evday, 'cron', hour='6', minute='0')
scheduler.start()

# –û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ inline
@bot.callback_query_handler(func=lambda call: call.data == 'inline_read')  
def inline_reading(check):
    user_id = check.from_user.id
    user_name = check.from_user.username
    user_first_name = check.from_user.first_name
    tconv = time.strftime("%d.%m.%Y")
    today_date = tconv
    today = func.addiction_stat(day = today_date)
    print('–û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ (–∏–Ω–ª–∞–π–Ω) ', user_name, user_first_name)
    logging.info(f"–û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ (–∏–Ω–ª–∞–π–Ω) {user_name}, {user_first_name}.")
    info_msg = func.msg_plan(day_input=today_date)
    func.reading(user_id = user_id)
    rem_select = func.reminder_select(user_id = user_id)
    try:
        func.reminder_delete(user_id = user_id, message_id = rem_select[0][0])
    except:
        pass
    bot.edit_message_text(chat_id=check.message.chat.id, message_id=check.message.message_id, text=f"‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\nüìÜ –°–µ–≥–æ–¥–Ω—è {today_date}, *–¥–µ–Ω—å ‚Ññ{today}*\n\nüìñ –ß–∏—Ç–∞–µ–º *{info_msg}*\n\n‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ!", parse_mode= "Markdown", reply_markup=None)




# –í—ã–∑–æ–≤ –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª–∏
@bot.message_handler(commands=['admin'])
def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    print(username, ' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É admin')
    logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É admin: {username}, {user_id}.")
    if message.chat.id == admin:
        print(username, '–ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ')
        logging.info(f"–ü–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ: {username}, {user_id}.")
        bot.send_message(message.chat.id, ' {}, –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!'.format(message.from_user.first_name),
                         reply_markup=kb.admin)




# –ó–∞–ø—Ä–æ—Å, —á—Ç–æ —á–∏—Ç–∞–µ–º —Å–µ–≥–æ–¥–Ω—è, –æ—Ç—á–µ—Ç –æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–Ω—è—Ö
@bot.message_handler(content_types=['text'])
def msg_user(message):
    user_id = message.from_user.id
    user_first_name = message.from_user.first_name
    user_name = message.from_user.username
    # –¶–∏–∫–ª —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —É –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∏ id –∏–∑ –±–¥
    rem_select = func.reminder_select(user_id = user_id)
    try:
        bot.edit_message_reply_markup(message.chat.id, message_id = rem_select, reply_markup = '')
        func.reminder_delete(user_id = user_id, message_id = rem_select[0][0])
    except:
        pass
    if message.text == 'üéÅ –ß—Ç–æ —á–∏—Ç–∞–µ–º —Å–µ–≥–æ–¥–Ω—è?':
        tconv = lambda x: time.strftime("%d.%m.%Y", time.localtime(x))
        today_date = tconv(message.date)
        print('–ß—Ç–æ —á–∏—Ç–∞–µ–º —Å–µ–≥–æ–¥–Ω—è ', user_name, user_first_name)
        logging.info(f"–ß—Ç–æ —á–∏—Ç–∞–µ–º —Å–µ–≥–æ–¥–Ω—è: {user_name}, {user_first_name}.")
        today = func.addiction_stat(day = today_date)
        info = func.msg_plan(day_input=today_date)
        if info == ([]):
            result_msg = bot.send_message(message.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n–í—Å–µ —Å–ª–æ–º–∞–ª–æ—Å—å? –ü–∏—à–∏—Ç–µ @utkows')
            logging.error(f"–û—à–∏–±–∫–∞, –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}, {user_first_name} –ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –≤ –ë–î.")
        else:
            bot.send_message(message.chat.id, f"–°–µ–≥–æ–¥–Ω—è {today_date}, *–¥–µ–Ω—å ‚Ññ {today}*", parse_mode= "Markdown")
            result_msg = bot.send_message(message.chat.id, info, reply_markup=kb.read)
            logging.info(f"–£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã –æ –¥–Ω–µ –¥–ª—è {user_name}, {user_first_name}.")
        # print('–ö–æ–Ω–µ—Ü —Å–µ—Å—Å–∏–∏')
        bot.register_next_step_handler(result_msg, reading)
    elif message.text == 'üìä –û—Ç—á–µ—Ç':
        print('–û—Ç—á–µ—Ç ', user_name, user_first_name)
        logging.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –æ—Ç {user_name}, {user_first_name}.")
        read_data = func.whats_read(user_id = user_id)
        # print('MAIN –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ ', read_data)
        # func.add_to_gsheet(read_data = read_data)
        tconv = lambda x: time.strftime("%d.%m.%Y", time.localtime(x))
        today_date = tconv(message.date)
        today = func.addiction_stat(day = today_date)
        today = re.sub("[)|(|,)]", "", str(today))
        # print('MAIN –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –¥–µ–Ω—å', today)
        stat_read = func.stat_reading(today = today, text = read_data)
        res_msg_reading = func.result_msg_read(stat_read = stat_read, user_id = user_id)
        stat_read_full = func.stat_read_full(stat_read)
        bot.send_message(message.chat.id, f"–°–µ–≥–æ–¥–Ω—è {today_date}, *–¥–µ–Ω—å ‚Ññ {today}*", parse_mode= "Markdown")
        stat_read_len = str(len(stat_read)-1)
        count_stat = str(len(res_msg_reading))
        # print('MAIN –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π ', stat_read_len)
        # print('MAIN –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π ', count_stat)
        today_verify = func.today_verify(user_id, today)
        # print('today_verify ', today_verify)
        # print('today ', today)
        count_res = str(int(today) - int(count_stat))
        # print('MAIN –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ –Ω–∞ ', count_res)
        if int(today) - int(stat_read_len) == int(today) and count_res < '0' and str(today_verify) == str(today):
            count_res = re.sub("[-]", "", count_res)
            bot.send_message(message.from_user.id, f'üìà –í—ã –æ–ø–µ—Ä–µ–∂–∞–µ—Ç–µ –ø–ª–∞–Ω –Ω–∞ *{count_res}* –¥–Ω–µ–π!', parse_mode= "Markdown", reply_markup=kb.input_read_advance)
        elif stat_read_len == '0':
            today_verify = func.today_verify(user_id, today)
            if today_verify is None:
                tconv = lambda x: time.strftime("%d.%m.%Y", time.localtime(x))
                today_date = tconv(message.date)
                today = func.addiction_stat(day = today_date)
                info = func.msg_plan(day_input=today_date)
                bot.send_message(message.from_user.id, f'*üéá –í—Å–µ –ø–æ –ø–ª–∞–Ω—É!*\n\n‚ö°Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è:  *{info}*', parse_mode= "Markdown", reply_markup=kb.input_read_all_list)
            else:
                bot.send_message(message.from_user.id, '*üéá –í—Å–µ –ø–æ –ø–ª–∞–Ω—É!*', parse_mode= "Markdown", reply_markup=kb.input_read_all_list)
        else:
            count_stat = stat_read
            count_day = 0
            for i in count_stat:
                if i != 0:
                    count_day += 1
            # print('MAIN –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π ', count_day)
            if count_day < 8:
                logging.info(f"MAIN —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π: {stat_read_full}, –¥–ª—è {user_name}, {user_first_name}.")
                bot.send_message(message.from_user.id, f'üìâ *–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–Ω–∏ ‚Ññ:*\n\n{stat_read_full}\n\n‚è≥ –í—ã –æ—Ç—Å—Ç–∞–µ—Ç–µ –Ω–∞ *{count_day}* –¥–Ω–µ–π.', parse_mode= "Markdown")
                msg = bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.', reply_markup=kb.check)
                bot.register_next_step_handler(msg, reading_input)
            else:
                stat_read_msg = ', '.join([f'{stat_read_msg}' for stat_read_msg in stat_read])
                logging.info(f"MAIN —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π: {stat_read_msg}, –¥–ª—è {user_name}, {user_first_name}.")
                stat_read_msg = stat_read_msg[:0][:1] + stat_read_msg[(2):]
                bot.send_message(message.from_user.id, f'üìâ *–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–Ω–∏ ‚Ññ:*\n\n{stat_read_msg}\n\n‚è≥ –í—ã –æ—Ç—Å—Ç–∞–µ—Ç–µ –Ω–∞ *{count_day}* –¥–Ω–µ–π.', parse_mode= "Markdown")
                bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ —ç—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.', reply_markup=kb.statistics)
    elif message.text == 'üóû –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–Ω–∏':
        print('–°–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ ', user_name, user_first_name)
        read_data = func.whats_read(user_id = user_id)
        # print('MAIN –≤—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ ', read_data)
        logging.info(f"–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–Ω–∏: {read_data}, –¥–ª—è {user_name}, {user_first_name}.")
        text = ' '.join([f'{read_data}' for read_data in read_data])
        text = re.sub("[)|(|')]", "", text)
        text = text.replace(",,", ",")
        bot.send_message(message.from_user.id, f'*–°–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π:*\n\n {text}', parse_mode= "Markdown", reply_markup=kb.input_read_all_list)
    elif message.text == '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –¥–Ω—è':
        print('–í–≤–æ–¥–∏—Ç –¥–µ–Ω—å –≤—Ä—É—á–Ω—É—é ', user_name, user_first_name)
        logging.info(f"–í–≤–æ–¥–∏—Ç –¥–µ–Ω—å –≤—Ä—É—á–Ω—É—é {user_name}, {user_first_name}.")
        tconv = lambda x: time.strftime("%d.%m.%Y", time.localtime(x))
        today = tconv(message.date)
        today = func.addiction_stat(day = today)
        today = re.sub("[)|(|,)]", "", str(today))
        msg = bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1", –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å ‚Ññ *{today}*.', parse_mode= "Markdown", reply_markup=kb.back)
        bot.register_next_step_handler(msg, input_day)
    elif message.text == 'üóì –û—Ç–º–µ—Ç–∏—Ç—å –¥–Ω–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ':
        msg = bot.send_message(message.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.check)
        bot.register_next_step_handler(msg, check)
    elif message.text == '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å':
        tconv = lambda x: time.strftime("%d.%m.%Y", time.localtime(x))
        today = tconv(message.date)
        today = func.addiction_stat(day = today)
        today = re.sub("[)|(|,)]", "", str(today))
        msg = bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1", –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å ‚Ññ *{today}*.', parse_mode= "Markdown", reply_markup=kb.back)
        bot.register_next_step_handler(msg, input_day)
    elif message.text == '‚úçÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å':
        msg = bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1"', parse_mode= "Markdown", reply_markup=kb.back)
        bot.register_next_step_handler(msg, input_sev_days)
    elif message.text == '‚úÖ –í—Å—ë –ø—Ä–æ—á–∏—Ç–∞–Ω–æ':
        tconv = lambda x: time.strftime("%d.%m.%Y", time.localtime(x))
        today = tconv(message.date)
        today = func.addiction_stat(day = today)
        today = re.sub("[)|(|,)]", "", str(today))
        read_data = func.whats_read(user_id = user_id)
        stat_read = func.stat_reading(today = today, text = read_data)
        res_msg_reading = func.result_msg_read(stat_read = stat_read, user_id = user_id)
        res_msg_reading_len = str(len(stat_read))
        # print('MAIN –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π', res_msg_reading_len)
        if int(res_msg_reading_len) > 1:
            msg = bot.send_message(message.from_user.id, f'‚ùóÔ∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏ –±—É–¥—É—Ç –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ.\n–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?', parse_mode= "Markdown", reply_markup=kb.yes_no)
            bot.register_next_step_handler(msg, check_all)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π!", parse_mode= "Markdown", reply_markup=kb.menu)
    elif message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏':
            print('–£–¥–∞–ª–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ ', user_name, user_first_name)
            logging.info(f"–£–¥–∞–ª–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ {user_name}, {user_first_name}.")
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏", reply_markup=kb.back)
            bot.register_next_step_handler(msg, delete_check)
    elif message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å':
            print('–£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å ', user_name, user_first_name)
            logging.info(f"–£–¥–∞–ª–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ {user_name}, {user_first_name}.")
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏", reply_markup=kb.back)
            bot.register_next_step_handler(msg, delete_check)
    elif message.text == 'üÜò –ü–æ–º–æ—â—å':
            print('–ü–æ–º–æ—â—å ', user_name, user_first_name)
            logging.info(f"–ü–æ–º–æ—â—å {user_name}, {user_first_name}.")
            bot.send_message(message.chat.id, f'–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ [—Å—Å—ã–ª–∫–µ](https://telegra.ph/Plan-chteniya-Biblii-NBC-bot-01-10)', parse_mode= "Markdown")
            bot.send_message(message.chat.id, f'–ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É üëá', parse_mode= "Markdown", reply_markup=kb.quesch)
    elif message.text == '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ':
            logging.info(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_name}, {user_first_name}.")
            msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=kb.back)
            bot.register_next_step_handler(msg, quesch)
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
            logging.info(f"–ù–∞–∂–∞–ª –ù–∞–∑–∞–¥ –≤ –≥–ª.–º–µ–Ω—é {user_name}, {user_first_name}.")
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.menu)    
    else:
        logging.info(f"–û—à–∏–±–∫–∞, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤ –≥–ª.–º–µ–Ω—é {user_name}, {user_first_name}.")
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏!", reply_markup=kb.menu)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º –≤—Ä—É—á–Ω—É—é –¥–Ω–µ
def input_day(message):
    user_id = message.from_user.id
    user_first_name = message.from_user.first_name
    user_name = message.from_user.username
    generate_alldays = sorted(map(str, range(1, 365+1)))
    text = message.text
    global value_input
    if message.text == 'üîô –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.check)
    elif text.isdigit()==False:
        logging.info(f"–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ –¥–Ω—è {user_name}, {user_first_name}.")
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!', reply_markup=kb.statistics)
    elif text.isdigit():
        for i in generate_alldays:
            if i == text:        
                value_input = func.user_input(value = text)
                value = func.value_plan(value_input = value_input)
                msg = bot.send_message(message.from_user.id, value, reply_markup=kb.input_day)
                bot.register_next_step_handler(msg, reading_input)
    else:
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ!', reply_markup=kb.statistics)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä—É—á–Ω—É—é –¥–Ω—è (—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–ª–∞–Ω–∞)
def reading_input(message):
    text = message.text
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    user_id = message.from_user.id
    tconv = lambda x: time.strftime("%d.%m.%Y", time.localtime(x))
    today = tconv(message.date)
    today = func.addiction_stat(day = today)
    today = re.sub("[)|(|,)]", "", str(today))
    read_data = func.whats_read(user_id = user_id)
    stat_read = func.stat_reading(today = today, text = read_data)
    res_msg_reading = func.result_msg_read(stat_read = stat_read, user_id = user_id)
    res_msg_reading_len = str(len(stat_read))
    if text == "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ!":
            print('–û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ (–≤—Ä—É—á–Ω) ', user_name, user_first_name)
            logging.info(f"–û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ (–≤—Ä—É—á–Ω) {user_name}, {user_first_name}.")
            func.addiction(day = value_input)
            func.reading(user_id = user_id)
            bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ! üéâ', reply_markup=kb.check_day)
    elif text == 'üîô –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.menu)
    elif text == '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å':
        print('–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å ', user_name, user_first_name)
        msg = bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1", –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å ‚Ññ *{today}*.', parse_mode= "Markdown", reply_markup=kb.back)
        bot.register_next_step_handler(msg, input_day)
    elif text == '‚úÖ –í—Å—ë –ø—Ä–æ—á–∏—Ç–∞–Ω–æ':
        print('–í—Å—ë –ø—Ä–æ—á–∏—Ç–∞–Ω–æ ', user_name, user_first_name)
        logging.info(f"–í—Å—ë –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {user_name}, {user_first_name}.")
        if int(res_msg_reading_len) > 1:
            msg = bot.send_message(message.from_user.id, f'‚ùóÔ∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏ –±—É–¥—É—Ç –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ.\n–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?', parse_mode= "Markdown", reply_markup=kb.yes_no)
            bot.register_next_step_handler(msg, check_all)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π!", parse_mode= "Markdown", reply_markup=kb.menu)
    elif text == '‚úçÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å':
        print('–û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å ', user_name, user_first_name)
        msg = bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1"', parse_mode= "Markdown", reply_markup=kb.back)
        bot.register_next_step_handler(msg, input_sev_days)
    elif text == '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å':
        print('–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å ', user_name, user_first_name)
        msg = bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1"', parse_mode= "Markdown", reply_markup=kb.back)
        bot.register_next_step_handler(msg, input_sev_days)
    elif message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏':
        print('–£–¥–∞–ª–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ ', user_name, user_first_name)
        logging.info(f"–£–¥–∞–ª–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ {user_name}, {user_first_name}.")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏", reply_markup=kb.back)
        bot.register_next_step_handler(msg, delete_check)
    else:
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!', reply_markup=kb.menu)
        logging.info(f"–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ (–≤—Ä—É—á–Ω) {user_name}, {user_first_name}.")

# –§—É–Ω–∫—Ü–∏—è –ø–æ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ (–∞–≤—Ç–æ)
def reading(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ!":
        tconv = lambda x: time.strftime("%d.%m.%Y", time.localtime(x))
        today_date = tconv(message.date)
        print('–û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ (–∞–≤—Ç–æ) ', user_name, user_first_name)
        logging.info(f"–û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ (–∞–≤—Ç–æ) {user_name}, {user_first_name}.")
        func.addiction_stat(day = today_date)
        func.reading(user_id = user_id)
        bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ! üéâ', reply_markup=kb.menu)
    elif text == 'üîô –ù–∞–∑–∞–¥':
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.menu)
    else:
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')
        logging.info(f"–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ (–∞–≤—Ç–æ) {user_name}, {user_first_name}.")


def check(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    logging.info(f"–û—Ç–º–µ—Ç–∏—Ç—å –¥–Ω–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ {user_name}, {user_first_name}.")
    read_data = func.whats_read(user_id = user_id)
    tconv = lambda x: time.strftime("%d.%m.%Y", time.localtime(x))
    today = tconv(message.date)
    today = func.addiction_stat(day = today)
    today = re.sub("[)|(|,)]", "", str(today))
    stat_read = func.stat_reading(today = today, text = read_data)
    res_msg_reading = func.result_msg_read(stat_read = stat_read, user_id = user_id)
    res_msg_reading_len = str(len(stat_read))
    # print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π {res_msg_reading_len}, —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –Ω–æ–º–µ—Ä {today}')
    if text == '‚úÖ –í—Å—ë –ø—Ä–æ—á–∏—Ç–∞–Ω–æ':
        print('–í—Å—ë –ø—Ä–æ—á–∏—Ç–∞–Ω–æ ', user_name, user_first_name)
        if int(res_msg_reading_len) > 1:
            msg = bot.send_message(message.from_user.id, f'‚ùóÔ∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏ –±—É–¥—É—Ç –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ.\n–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?', parse_mode= "Markdown", reply_markup=kb.yes_no)
            bot.register_next_step_handler(msg, check_all)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π!", parse_mode= "Markdown", reply_markup=kb.menu)
    elif text == '‚úçÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å':
        print('–û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å ', user_name, user_first_name)
        msg = bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1"', parse_mode= "Markdown", reply_markup=kb.back)
        bot.register_next_step_handler(msg, input_sev_days)
    elif text == '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å':
        print('–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å ', user_name, user_first_name)
        msg = bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1"', parse_mode= "Markdown", reply_markup=kb.back)
        bot.register_next_step_handler(msg, input_sev_days)
    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.statistics)


# –§—É–Ω–∫—Ü–∏—è –ø–æ –æ—Ç–º–µ—Ç–∫–µ –≤—Å–µ—Ö –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π
def check_all(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == '‚ùå –ù–µ—Ç!':
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.statistics)
    elif text == '‚úÖ –î–∞!':
        print('–û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ (–≤—Å–µ –¥–Ω–∏) ', user_name, user_first_name)
        logging.info(f"–û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ (–≤—Å–µ –¥–Ω–∏) {user_name}, {user_first_name}.")
        read_data = func.whats_read(user_id = user_id)
        # print('MAIN –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ ', read_data)
        tconv = lambda x: time.strftime("%d.%m.%Y", time.localtime(x))
        today = tconv(message.date)
        today = func.addiction_stat(day = today)
        today = re.sub("[)|(|,)]", "", str(today))
        stat_read = func.stat_reading(today = today, text = read_data)
        func.check_all(user_id = user_id, stat_read = stat_read)
        bot.send_message(message.chat.id, "–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ!", reply_markup=kb.menu)
    else:
        bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!", reply_markup=kb.menu)


# –§—É–Ω–∫—Ü–∏—è –ø–æ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π (–±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∞)
def input_sev_days(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    generate_alldays = sorted(map(str, range(1, 365+1)))
    if text == 'üîô –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.check)
    elif text.isdigit()==False:
        logging.info(f"–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ –¥–Ω—è {user_name}, {user_first_name}.")
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!', reply_markup=kb.check)
    elif text.isdigit():
            for i in generate_alldays:
                if i == text:
                    value_input = func.user_input(value = text)
                    func.addiction(day = value_input)
                    func.reading(user_id = user_id)
                    # func.check_all(user_id = user_id, stat_read = text)
            msg = bot.send_message(message.from_user.id, f'–î–µ–Ω—å ‚Ññ{text} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π!', reply_markup=kb.check_day)
            bot.register_next_step_handler(msg, check)
    else:
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ!', reply_markup=kb.check)


# –§—É–Ω–∫—Ü–∏—è –ø–æ —É–¥–∞–ª–µ–Ω–∏—é –æ—Ç–º–µ—Ç–∫–∏ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏
def delete_check(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if text == 'üîô –ù–∞–∑–∞–¥':
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.statistics)
    else:
        logging.info(f"–£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ—Ç–∫–∏ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ –¥–Ω—è {text}, –¥–ª—è {user_name}, {user_first_name}.")
        func.delete_check(user_id = user_id, delete_day = text)
        bot.send_message(message.from_user.id, f"–û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ {text}-–≥–æ –¥–Ω—è —É–¥–∞–ª–µ–Ω–∞", reply_markup=kb.delete_more)


# –§—É–Ω–∫—Ü–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –û–°
def quesch(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if message.text == 'üîô –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.menu)
    else:
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_name}, {user_first_name}.")
        info = admin
        bot.send_message(message.chat.id, text=' –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è')
        bot.send_message(info, f'–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\nID: {user_id}\nUsername: @{user_name}\n–ò–º—è: {user_first_name}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {str(text)}')
        bot.send_message(message.chat.id, text=' –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!', reply_markup=kb.menu)






#–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ (–∞–¥–º–∏–Ω)
@bot.callback_query_handler(func=lambda call: True)   
def handler_call(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    user_id = call.from_user.id
    if call.data == 'statistics':
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=func.stats(), reply_markup=kb.admin)
    elif call.data == 'admin_msg':
            chat_id = call.message.chat.id
            text = call.message.text
            msg = bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. \n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ –ù–∞–∑–∞–¥!', reply_markup=kb.back)
            bot.register_next_step_handler(msg, message1)
    elif call.data == 'logging': 
        bot.send_document(chat_id=chat_id, document=open('log.log', 'rb'))
    elif call.data == 'admin_msg_user':
            chat_id = call.message.chat.id
            text = call.message.text
            msg = bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. \n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ –ù–∞–∑–∞–¥!', reply_markup=kb.back)
            bot.register_next_step_handler(msg, admin_msg_user_id)
    elif call.data == 'subd':
        bot.send_document(chat_id=chat_id, document=open('db.db', 'rb'))

def message1(message):
    text = message.text
    if message.text == 'üîô –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.menu)
    else:
        info = func.admin_message(text)
        bot.send_message(message.chat.id, text=' –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!')
        for i in range(len(info)):
            try:
                time.sleep(1)
                bot.send_message(info[i][0], str(text))
            except:
                pass
        bot.send_message(message.chat.id, text=' –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        # print (info)

def admin_msg_user_id(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    text = message.text
    if message.text == 'üîô –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.menu)
    else:
        global info_user
        info_user = text
        msg = bot.send_message(message.chat.id, text=f' ID {text} –∑–∞–ø–∏—Å–∞–Ω, –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
        bot.register_next_step_handler(msg, admin_msg_user)

def admin_msg_user(message):
    user_id = message.from_user.id
    text = message.text
    info_user_id = info_user
    bot.send_message(info_user_id, f'–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n{str(text)}')
    bot.send_message(message.chat.id, text=' –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')


# –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
bot.polling(none_stop=True)
bot.infinity_polling()
# print('–ù–∞–∂–º–∏ –≤—ã—Ö–æ–¥ –µ—â–µ —Ä–∞–∑')
# bot.polling()